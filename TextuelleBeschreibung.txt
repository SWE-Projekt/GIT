GIT   Use – Case Szenarien
Use Case: 			Clone Repository
Kurzbeschreibung: 	Der Programmierer kopiert sämtliche Daten des Repositories auf seinen lokalen Rechner.
Vorbedingung:	Ein Repository muss auf dem Server existieren
Primärer Aktor:	Programmierer
Nachbedingung:	Das Repository auf dem Rechner des Programmierers ist mit dem auf dem Server identisch
Erfolgsszenario:
Der Programmierer gibt das Kommando zum Klonen eines Repositories mit Serveradresse in die Shell ein.
Das System verbindet sich mit dem Server.
Das System überträgt das Repository vom Server auf den Rechner des Programmierers.
Das System informiert den Programmierer über den Erfolg der Aktion.
Das Use Case endet erfolgreich.

Use Case: 			Quellcode bearbeiten
Kurzbeschreibung: 	Der Programmierer möchte den Quellcode ändern. Dazu muss er das Repositorie auf den neuesten Stand bringen (‚pull‘), den Quellcode bearbeiten, die Änderungen übernehmen (‚commit‘) und die Änderungen an den Server übertragen (‚Push‘)
Vorbedingung:	Ein Repository muss sich auf dem Rechner und auf dem Server befinden.
Primärer Aktor:	Programmierer
Nachbedingung:	Die Änderungen des Programmierers werden registriert und in die History aufgenommen.
Erfolgsszenario:
Der Programmierer gibt das Kommando zum Holen von Änderungen in die Shell ein.
Das System verbindet sich mit dem Server.
Das System vergleicht den lokalen Zustand des Branches mit dem auf dem Server.
Das System integriert (‚merge‘) den Branch auf dem Server in den Branch auf dem Rechner.
Das System informiert den Programmierer über den Erfolg der Aktion.
Der Programmierer ändert den Quellcode
Das System verfolgt die Änderungen.
Der Programmierer gibt das Kommando zum Übernehmen (‚Commit‘) von Änderungen in die Shell ein mit einer Kurzbeschreibung seiner Änderungen.
Das System übernimmt die Änderungen und trägt sie in die History des aktuellen Branches ein.
Das System informiert den Programmierer über den Erfolg der Aktion.
Der Programmierer gibt das Kommando zum Übertragen der Änderungen (‚Pull‘) auf den Server ein.
Das System integriert den aktuellen Branch des Rechners in den entsprechenden Branch auf dem Server (‚merge‘)
Das System liefert dem Programmierer eine Erfolgsmeldung
Das Use Case endet erfolgreich.


Use Case: 			Branch erstellen
Kurzbeschreibung: 	Das System erstellt einen neuen Branch mit dem Zustand des Branches auf dem sich der Programmierer befindet.
Vorbedingung:	Es muss ein Repository existieren.
Primärer Aktor:	Programmierer
Nachbedingung:	Es gibt einen neuen Branch.
Erfolgsszenario:
Der Programmierer gibt das Kommando zum Erstellen eines Branches in die Shell ein mit dem Namen des neuen Branches.
Das System erzeugt einen neuen Branch.
Das Use Case endet erfolgreich.

Use Case: 			Branch mergen
Kurzbeschreibung: 	Ein Branch wird in einen anderen Branch integriert
Vorbedingung:	Es müssen 2 Branches existieren.
Primärer Aktor:	Programmierer
Nachbedingung:	Es gibt einen neuen Branch.
Erfolgsszenario:
Der Programmierer gibt das Kommando zum Mergen eines Branches in die Shell ein mit dem Namen des zu integrierenden Branches.
Das System integriert den Branche in den aktiven Branche. 
Das Use Case endet erfolgreich.

Use Case: 			Branch switchen
Kurzbeschreibung: 	Der aktuelle Branch auf dem Rechner wird gewechselt (‚switch‘)
Vorbedingung:	Es müssen mindestens 2 Branches existieren.
Primärer Aktor:	Programmierer
Nachbedingung:	Der aktuelle Branch wurde gewechselt.

Erfolgsszenario:
Der Programmierer gibt das Kommando zum Wechseln eines Branches (‚switch‘) in die Shell ein mit dem Namen des Zielbranches.
Das System wechselt zum Zielbranch.
Das Use Case endet erfolgreich.

Use Case: 			Repository verwalten
Kurzbeschreibung: 	Ein Repository wird verwaltet.
Vorbedingung:	Keine – es kann auch erst bei der Verwaltung ein Repository angelegt werden.
Primärer Aktor:	Admin
Nachbedingung:	Repository verändert. 
Erfolgsszenario:
Der Admin spezifiziert eine Verwaltungsoperation (löschen, erstellen umbenennen)
Das System führt die entsprechende Aktion aus und informiert den Admin über den Erfolg der Aktion.
Das Use Case endet erfolgreich.

Use Case: 			Rechte verwalten
Kurzbeschreibung: 	Der Admin kann Leserechte und ausführrecht für bestimmte Nutzergruppen verteilen.
Vorbedingung:	Es muss mindestens eine Gruppe bestehen. 
Primärer Aktor:	Admin
Nachbedingung:	Die Rechte wurden geändert. 

Erfolgsszenario:
Der Admin gibt das Kommando zum Verwalten von Rechten in die Shell ein mit dem Namen der zu verwaltenden Gruppe.
Das System listet die Rechte der ausgewählten Gruppe.
Der Admin gibt entsprechende Kommandos zum Verwalten der Rechte ein.
Das System informiert den Admin über eine erfolgreiche Ausführung der Aktion.
Das Use Case endet erfolgreich.





Repository: Die Projektdaten und Informationen des Git-Systems (History, Branches, etc).